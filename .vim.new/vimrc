" ===================================================
"  Plugins
" ===================================================

call plug#begin('~/.vim/plugged')

if filereadable("~/.vimrc.local.plugged")
    source ~/.vimrc.local.plugged
endif

Plug 'martinda/Jenkinsfile-vim-syntax'
Plug 'chrisbra/NrrwRgn'  " narrow selection. Usage: \nr or :NR
" {{{
    let g:nrrw_rgn_vert = 1
" }}}
Plug 'prettier/vim-prettier' " Usage: \p or :Prettier; FIXME: autoformat on save not working
" {{{
    let g:prettier#autoformat = 1
" }}}

Plug 'tpope/vim-unimpaired'  " enable [q, ]q, [e, ]e, etc
Plug 'tpope/vim-repeat'      " to enable . command for [e and ]e etc
Plug 'vim-scripts/taglist.vim'
Plug 'tpope/vim-sensible'   " Set good vimrc defaults
Plug 'nicoraffo/conque'     " Usage: <C-h>
let g:ConqueTerm_ExecFileKey = ''       " default: '<F11>'
Plug 'JLimperg/Align'       " Usage: \t=
Plug 'nvie/vim-togglemouse' " Usage: F12
" Plug 'mihais/vim-mark'      " For multiple highlights. Usage: \m

Plug 'masukomi/vim-markdown-folding'
" {{{
    set nocompatible
    if has("autocmd")
        filetype plugin indent on
    endif
" }}}

" the current develop branch breaks for python 3.7.
" Workaround: use a 3rd party fix, which though will break python < 3.4
" 2018-10-29
"
" Plug 'klen/python-mode', {'branch': 'develop'}     " :help pymode
Plug 'riher/python-mode', {'branch': 'fix/py3-importlib'}     " :help pymode

Plug 'kien/ctrlp.vim'       " Usage: <C-\>p
Plug 'easymotion/vim-easymotion'    "Usage: \\sf
Plug 'vim-scripts/TaskList.vim'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-abolish'
" Plug 'embear/vim-localvimrc'    " causing problems for Yocto build?
Plug 'scrooloose/nerdcommenter'

Plug 'szw/vim-maximizer'
" {{{
  " let g:maximizer_set_default_mapping = 1     " not working somehow. so the following
  nnoremap <silent> <leader>m :MaximizerToggle<CR>
  vnoremap <silent> <leader>M :MaximizerToggle<CR>gv
" }}}

Plug 'vim-scripts/a.vim'
" {{{
  nnoremap <silent> <leader>s :A<CR>       
  nnoremap <silent> <leader>sv :AV<CR>      " splits and switches
  nnoremap <silent> <leader>sc :IH<CR>      " switches to file under cursor
  nnoremap <silent> <leader>scv :IHS<CR>    " splits and switches to file under cursor
" }}}

Plug 'luochen1990/rainbow'
let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle

let g:powerline_pycmd = 'py3'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
" {{{
  nnoremap <silent> <leader><space> :Files<CR>
  nnoremap <silent> <leader>a :Buffers<CR>
  nnoremap <silent> <leader>A :Windows<CR>
  nnoremap <silent> <leader>; :BLines<CR>
  nnoremap <silent> <leader>o :BTags<CR>
  nnoremap <silent> <leader>O :Tags<CR>
  nnoremap <silent> <leader>? :History<CR>

  " For Ag
  " nnoremap <silent> <leader>/ :execute 'Ag ' . input('Ag/')<CR>
  " nnoremap <silent> <leader>. :AgIn
  " nnoremap <silent> K :call SearchWordWithAg()<CR>
  " vnoremap <silent> K :call SearchVisualSelectionWithAg()<CR>
  
  " For Rg
  nnoremap <silent> <leader>. :Rg<CR>

  nnoremap <silent> <leader>gl :Commits<CR>
  nnoremap <silent> <leader>ga :BCommits<CR>
  nnoremap <silent> <leader>ft :Filetypes<CR>

  imap <C-x><C-f> <plug>(fzf-complete-file-ag)
  imap <C-x><C-l> <plug>(fzf-complete-line)

  function! SearchWordWithAg()
    execute 'Ag' expand('<cword>')
  endfunction

  function! SearchVisualSelectionWithAg() range
    let old_reg = getreg('"')
    let old_regtype = getregtype('"')
    let old_clipboard = &clipboard
    set clipboard&
    normal! ""gvy
    let selection = getreg('"')
    call setreg('"', old_reg, old_regtype)
    let &clipboard = old_clipboard
    execute 'Ag' selection
  endfunction

  function! SearchWithAgInDirectory(...)
    call fzf#vim#ag(join(a:000[1:], ' '), extend({'dir': a:1}, g:fzf#vim#default_layout))
  endfunction
  command! -nargs=+ -complete=dir AgIn call SearchWithAgInDirectory(<f-args>)
" }}}

Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
let g:vim_markdown_folding_level = 6

" Disable this on 2016-02-18, since
" 1) Never used this
" 2) Causing problem after today's update
" Plug 'scrooloose/nerdtree'  " XXX: require ruby
let NERDTreeQuitOnOpen = 0

"
" Good syntax checker, but slow when opening & saving
"
"Plug 'scrooloose/syntastic'    

" 
" Reason to choose neocomplete over YouCompleteMe:
"   * Ctrl-P & Ctrl-N is totally non-sense in YouCompleteMe, while
"     in neocomplete they are still usable
"
"Plug 'Shougo/neocomplete.vim'   "XXX: require lua
"Plug 'Valloric/YouCompleteMe'

Plug 'dkprice/vim-easygrep'

call plug#end()

" ===================================================
" Plugin Settings
" ===================================================

" neocomplete
" ----------------------
"let g:neocomplete#enable_at_startup = 0  " disable this for now

" ctrlp
" ----------------------
let g:ctrlp_map = '<C-\>p'
let g:ctrlp_cmd = 'CtrlP'

" Python Mode
" ----------------------
let g:pymode_folding = 0
" E203: white space before operator 
" E211: whitespace before '('
" E221: too many spaces
" E222: whitespace after operator
" E225: missing spaces around operator
" E501: long line; 
" W0401: import *
let g:pymode_lint_ignore = "E203,E211,E221,E222,E225,E501,W0401,E402"
let g:pymode_lint_options_mccabe = { 'complexity': 40 }

" conque
" ----------------------
map <C-h> :ConqueTermVSplit bash<CR>

"  latex vim 
" ----------------------
" IMPORTANT: win32 users will need to have 'shellslash' 
" set so that latex can be called correctly.
set shellslash
" IMPORTANT: grep will sometimes skip displaying the file 
" name if you search in a singe file. This will confuse 
" latex-suite. Set your grep program to alway generate a file-name.
set grepprg=grep\ -nH\ $*

" syntastic
" ----------------------
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

let g:localvimrc_ask=0

" ===================================================
"  Non-plugins Settings
" ===================================================

" Included in vim-sensible
" ----------------------
"set autoindent
"syntax on
"set nocompatible	" Use Vim settings, rather then Vi settings
"set nocp
"filetype plugin on
"filetype indent on
"set is
"set laststatus=2

" Tab related
" ----------------------
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set smarttab
set cindent

" Misc
" ----------------------
set nobinary
"set fileformat=dos
"set completeopt=preview    " Set thsi to disable the candidate menu
set showmode
set hlsearch
set nowrapscan
set showmatch
set matchtime=1
set updatetime=1000
set winminheight=0
set ttymouse=xterm2     " Enable mouse support
set diffopt=vertical
set splitright
set statusline=%F%m%r%h%w(%L)\ \ \ \ \ [%l,%v]\ \ \ \ [%p%%]
set ic
set nu
set noswapfile
set completeopt-=preview

let loaded_matchparen = 1
let b:match_words = &matchpairs
let &mouse="a"      " Default mouse to terminal mode

if filereadable(".vimrc.local.misc")
    source .vimrc.local.misc
endif

let &colorcolumn="80"
" highlight ColorColumn ctermbg=Black
highlight ColorColumn ctermbg=gray

set list       " show tabs
set listchars=tab:â–¸\ ,

highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

set cscopequickfix=s-,c-,d-,i-,t-,e-   " Open cscope results in cwindow
set foldmarker=//<,//>

set cino=l1    " better switch-case {} formatting
set grepprg=rg\ --ignore\ --no-heading\ --line-number
let g:EasyGrepCommand=1

" Key mappings
"------------------------------------------------------------------------------

" Map Functions Keys
"
" Note:
"  F1, F2, F3, F4, F5 not working for @a. Only switching case
"
map <F6>    :set fdm=marker<CR>
map <F7>    :set fdm=syntax<CR>
map <F8>    zM
map <F9>    zR

map <F11>    :qa<CR>

"map <F6>    @a
"map <F11>    :set invpaste<CR>
"map <F12>    :NERDTreeToggle<CR>

" Version Control System mappings
map ,sD :vsp new<Enter>:read !svn diff<Enter>:set syntax=diff buftype=nofile<Enter>gg
map ,hD :vsp new<Enter>:read !hg diff<Enter>:set syntax=diff buftype=nofile<Enter>gg
map ,gD :vsp new<Enter>:read !git diff<Enter>:set syntax=diff buftype=nofile<Enter>gg

map ,sd :!svn cat -r BASE % > /tmp/tmpfile.c<Enter><Enter>:diffsplit /tmp/tmpfile.c<Enter><Enter>gg
map ,hd :!hg cat % > /tmp/tmpfile.c<Enter><Enter>:diffsplit /tmp/tmpfile.c<Enter><Enter>gg
map ,gd :!git show HEAD:% > /tmp/tmpfile.c<Enter><Enter>:diffsplit /tmp/tmpfile.c<Enter><Enter>gg

map ,ss :!svn stat\|grep -v "\.out$"\|grep -v "\.orig$"\|grep -v "\.swp$"<Enter>
map ,hs :!hg stat\|grep -v "\.out$"\|grep -v "\.orig$"\|grep -v "\.swp$"<Enter>
map ,gs :!git status -s<Enter>

map ,sl :!svn log\|head -n14<Enter>
map ,hl :!hg log\|head -n14<Enter>
map ,gl :!git tree2\|head -n14<Enter>

map ,hv :!hg view<Enter>
map ,gv :!gitk<Enter>

" Misc
"-------------------------------------
map ,e :vsp<Enter>:Explore<Enter>
inoremap {<cr> {<cr>}<c-o>O
inoremap [<cr> [<cr>]<c-o>O
inoremap (<cr> (<cr>)<c-o>O

map ,, :A<Enter>
map ZZ :wq<CR>
"map ,q :q<Enter>
"nnoremap ; :
"
nnoremap <leader>wn :vnew<CR>

" TODO: change this to ga (no has conflict)
nnoremap <leader>gg :!git add %;echo "Status:";git status -s <CR>
nnoremap <leader>gr :!git reset %;echo "Status:";git status -s <CR>
nnoremap <leader>gs :!git status -s <CR>

" Triger `autoread` when files changes on disk
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
" Notification after file change
" https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
autocmd FileChangedShellPost *
  \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None
